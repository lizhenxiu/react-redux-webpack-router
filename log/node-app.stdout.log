2018-01-12 15:11 +08:00: server is listening on localhost:8090
2018-01-12 15:11 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:12 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: server is listening on localhost:8090
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: server is listening on localhost:8090
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:22 +08:00: server is listening on localhost:8090
2018-01-12 15:23 +08:00: server is listening on localhost:8090
2018-01-12 15:23 +08:00: server is listening on localhost:8090
2018-01-12 15:24 +08:00: server is listening on localhost:8090
2018-01-12 15:24 +08:00: server is listening on localhost:8090
2018-01-12 15:25 +08:00: server is listening on localhost:8090
2018-01-12 15:25 +08:00: server is listening on localhost:8090
2018-01-12 15:26 +08:00: server is listening on localhost:8090
2018-01-12 15:26 +08:00: server is listening on localhost:8090
2018-01-12 15:27 +08:00: server is listening on localhost:8090
2018-01-12 15:27 +08:00: server is listening on localhost:8090
2018-01-12 15:27 +08:00: server is listening on localhost:8090
2018-01-12 15:28 +08:00: server is listening on localhost:8090
2018-01-12 15:28 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:28 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:28 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:28 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:28 +08:00: server is listening on localhost:8090
2018-01-12 15:29 +08:00: server is listening on localhost:8090
2018-01-12 15:29 +08:00: server is listening on localhost:8090
2018-01-12 15:30 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:30 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:30 +08:00: server is listening on localhost:8090
2018-01-12 15:31 +08:00: server is listening on localhost:8090
2018-01-12 15:31 +08:00: server is listening on localhost:8090
2018-01-12 15:31 +08:00: server is listening on localhost:8090
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: server is listening on localhost:8090
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:32 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:33 +08:00: server is listening on localhost:8090
2018-01-12 15:33 +08:00: server is listening on localhost:8090
2018-01-12 15:33 +08:00: server is listening on localhost:8090
2018-01-12 15:34 +08:00: server is listening on localhost:8090
2018-01-12 15:35 +08:00: server is listening on localhost:8090
2018-01-12 15:35 +08:00: server is listening on localhost:8090
2018-01-12 15:35 +08:00: server is listening on localhost:8090
2018-01-12 15:36 +08:00: server is listening on localhost:8090
2018-01-12 15:36 +08:00: server is listening on localhost:8090
2018-01-12 15:37 +08:00: server is listening on localhost:8090
2018-01-12 15:37 +08:00: server is listening on localhost:8090
2018-01-12 15:38 +08:00: server is listening on localhost:8090
2018-01-12 15:38 +08:00: server is listening on localhost:8090
2018-01-12 15:39 +08:00: server is listening on localhost:8090
2018-01-12 15:39 +08:00: server is listening on localhost:8090
2018-01-12 15:40 +08:00: server is listening on localhost:8090
2018-01-12 15:40 +08:00: server is listening on localhost:8090
2018-01-12 15:41 +08:00: server is listening on localhost:8090
2018-01-12 15:41 +08:00: server is listening on localhost:8090
2018-01-12 15:42 +08:00: server is listening on localhost:8090
2018-01-12 15:42 +08:00: server is listening on localhost:8090
2018-01-12 15:43 +08:00: server is listening on localhost:8090
2018-01-12 15:44 +08:00: server is listening on localhost:8090
2018-01-12 15:44 +08:00: server is listening on localhost:8090
2018-01-12 15:44 +08:00: server is listening on localhost:8090
2018-01-12 15:45 +08:00: server is listening on localhost:8090
2018-01-12 15:46 +08:00: server is listening on localhost:8090
2018-01-12 15:46 +08:00: server is listening on localhost:8090
2018-01-12 15:46 +08:00: server is listening on localhost:8090
2018-01-12 15:47 +08:00: server is listening on localhost:8090
2018-01-12 15:47 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:47 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-12 15:47 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:06 +08:00: server is listening on localhost:8090
2018-01-13 19:06 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:06 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:06 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:06 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:06 +08:00: server is listening on localhost:8090
2018-01-13 19:07 +08:00: server is listening on localhost:8090
2018-01-13 19:07 +08:00: server is listening on localhost:8090
2018-01-13 19:08 +08:00: server is listening on localhost:8090
2018-01-13 19:08 +08:00: server is listening on localhost:8090
2018-01-13 19:11 +08:00: server is listening on localhost:8090
2018-01-13 19:11 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:11 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:11 +08:00: server is listening on localhost:8090
2018-01-13 19:12 +08:00: server is listening on localhost:8090
2018-01-13 19:12 +08:00: server is listening on localhost:8090
2018-01-13 19:13 +08:00: server is listening on localhost:8090
2018-01-13 19:15 +08:00: server is listening on localhost:8090
2018-01-13 19:15 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:15 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:15 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:15 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:15 +08:00: server is listening on localhost:8090
2018-01-13 19:17 +08:00: server is listening on localhost:8090
2018-01-13 19:17 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:17 +08:00: InitialView { '$$typeof': Symbol(react.element),
  type: 
   { [Function: Provider]
     propTypes: 
      { store: [Function: bound checkType],
        children: [Function: bound checkType] },
     childContextTypes: 
      { store: [Function: bound checkType],
        storeSubscription: [Object] } },
  key: null,
  ref: null,
  props: 
   { store: 
      { dispatch: [Function],
        subscribe: [Function: subscribe],
        getState: [Function: getState],
        replaceReducer: [Function: replaceReducer] },
     children: 
      { '$$typeof': Symbol(react.element),
        type: [Object],
        key: null,
        ref: null,
        props: [Object],
        _owner: null,
        _store: {} } },
  _owner: null,
  _store: {} }
2018-01-13 19:17 +08:00: server is listening on localhost:8090
2018-01-13 19:17 +08:00: server is listening on localhost:8090
2018-01-13 19:18 +08:00: server is listening on localhost:8090
2018-01-13 19:18 +08:00: server is listening on localhost:8090
2018-01-13 19:19 +08:00: server is listening on localhost:8090
2018-01-13 19:19 +08:00: server is listening on localhost:8090
2018-01-13 19:20 +08:00: server is listening on localhost:8090
2018-01-13 19:20 +08:00: server is listening on localhost:8090
2018-01-13 19:21 +08:00: server is listening on localhost:8090
2018-01-13 19:21 +08:00: server is listening on localhost:8090
2018-01-13 19:22 +08:00: server is listening on localhost:8090
2018-01-13 19:22 +08:00: server is listening on localhost:8090
2018-01-13 19:23 +08:00: server is listening on localhost:8090
2018-01-13 19:23 +08:00: server is listening on localhost:8090
2018-01-13 19:24 +08:00: server is listening on localhost:8090
2018-01-13 19:24 +08:00: server is listening on localhost:8090
2018-01-13 19:25 +08:00: server is listening on localhost:8090
2018-01-13 19:25 +08:00: server is listening on localhost:8090
2018-01-13 19:26 +08:00: server is listening on localhost:8090
2018-01-13 19:26 +08:00: server is listening on localhost:8090
2018-01-13 19:27 +08:00: server is listening on localhost:8090
2018-01-13 19:27 +08:00: server is listening on localhost:8090
2018-01-13 19:28 +08:00: server is listening on localhost:8090
2018-01-13 19:28 +08:00: server is listening on localhost:8090
2018-01-13 19:29 +08:00: server is listening on localhost:8090
2018-01-13 19:29 +08:00: server is listening on localhost:8090
2018-01-13 19:30 +08:00: server is listening on localhost:8090
2018-01-13 19:30 +08:00: server is listening on localhost:8090
2018-01-13 19:31 +08:00: server is listening on localhost:8090
2018-01-13 19:31 +08:00: server is listening on localhost:8090
2018-01-13 19:32 +08:00: server is listening on localhost:8090
2018-01-13 19:32 +08:00: server is listening on localhost:8090
2018-01-13 19:33 +08:00: server is listening on localhost:8090
2018-01-13 19:33 +08:00: server is listening on localhost:8090
2018-01-13 19:34 +08:00: server is listening on localhost:8090
2018-01-13 19:34 +08:00: server is listening on localhost:8090
2018-01-13 19:35 +08:00: server is listening on localhost:8090
2018-01-13 19:35 +08:00: server is listening on localhost:8090
2018-01-13 19:36 +08:00: server is listening on localhost:8090
2018-01-13 19:36 +08:00: server is listening on localhost:8090
2018-01-13 19:37 +08:00: server is listening on localhost:8090
2018-01-13 19:37 +08:00: server is listening on localhost:8090
2018-01-13 19:38 +08:00: server is listening on localhost:8090
2018-01-13 19:38 +08:00: server is listening on localhost:8090
2018-01-13 19:39 +08:00: server is listening on localhost:8090
2018-01-13 19:39 +08:00: server is listening on localhost:8090
2018-01-13 19:40 +08:00: server is listening on localhost:8090
2018-01-13 19:40 +08:00: server is listening on localhost:8090
2018-01-13 19:41 +08:00: server is listening on localhost:8090
2018-01-13 19:41 +08:00: server is listening on localhost:8090
2018-01-13 19:42 +08:00: server is listening on localhost:8090
2018-01-13 19:42 +08:00: server is listening on localhost:8090
2018-01-13 19:43 +08:00: server is listening on localhost:8090
2018-01-13 19:43 +08:00: server is listening on localhost:8090
2018-01-13 19:44 +08:00: server is listening on localhost:8090
2018-01-13 19:44 +08:00: server is listening on localhost:8090
2018-01-13 19:45 +08:00: server is listening on localhost:8090
2018-01-13 19:45 +08:00: server is listening on localhost:8090
2018-01-13 19:46 +08:00: server is listening on localhost:8090
2018-01-13 19:46 +08:00: server is listening on localhost:8090
2018-01-13 19:47 +08:00: server is listening on localhost:8090
2018-01-13 19:47 +08:00: server is listening on localhost:8090
2018-01-13 19:48 +08:00: server is listening on localhost:8090
2018-01-13 19:48 +08:00: server is listening on localhost:8090
2018-01-13 19:49 +08:00: server is listening on localhost:8090
2018-01-13 19:49 +08:00: server is listening on localhost:8090
2018-01-13 19:50 +08:00: server is listening on localhost:8090
2018-01-13 19:50 +08:00: server is listening on localhost:8090
2018-01-13 19:51 +08:00: server is listening on localhost:8090
2018-01-13 19:51 +08:00: server is listening on localhost:8090
2018-01-13 19:52 +08:00: server is listening on localhost:8090
2018-01-13 19:52 +08:00: server is listening on localhost:8090
2018-01-13 19:53 +08:00: server is listening on localhost:8090
2018-01-13 19:53 +08:00: server is listening on localhost:8090
2018-01-13 19:54 +08:00: server is listening on localhost:8090
2018-01-13 19:54 +08:00: server is listening on localhost:8090
2018-01-13 19:55 +08:00: server is listening on localhost:8090
2018-01-13 19:55 +08:00: server is listening on localhost:8090
2018-01-13 20:21 +08:00: server is listening on localhost:8090
2018-01-13 20:22 +08:00: server is listening on localhost:8090
2018-01-13 21:30 +08:00: server is listening on localhost:8090
2018-01-13 21:30 +08:00: server is listening on localhost:8090
2018-01-13 21:31 +08:00: server is listening on localhost:8090
2018-01-13 21:45 +08:00: server is listening on localhost:8090
2018-01-13 21:45 +08:00: server is listening on localhost:8090
2018-01-13 21:59 +08:00: server is listening on localhost:8090
2018-01-13 21:59 +08:00: server is listening on localhost:8090
2018-01-13 22:07 +08:00: server is listening on localhost:8090
2018-01-13 22:08 +08:00: server is listening on localhost:8090
2018-01-13 22:16 +08:00: server is listening on localhost:8090
2018-01-13 22:29 +08:00: server is listening on localhost:8090
2018-01-13 22:29 +08:00: server is listening on localhost:8090
2018-01-13 22:38 +08:00: server is listening on localhost:8090
2018-01-13 22:38 +08:00: server is listening on localhost:8090
2018-01-13 22:45 +08:00: server is listening on localhost:8090
2018-01-13 22:46 +08:00: server is listening on localhost:8090
2018-01-13 22:55 +08:00: server is listening on localhost:8090
2018-01-13 22:55 +08:00: server is listening on localhost:8090
2018-01-13 23:05 +08:00: server is listening on localhost:8090
2018-01-13 23:05 +08:00: server is listening on localhost:8090
2018-01-13 23:06 +08:00: server is listening on localhost:8090
2018-01-13 23:06 +08:00: server is listening on localhost:8090
2018-01-13 23:07 +08:00: server is listening on localhost:8090
2018-01-13 23:07 +08:00: server is listening on localhost:8090
2018-01-13 23:08 +08:00: server is listening on localhost:8090
2018-01-13 23:08 +08:00: server is listening on localhost:8090
2018-01-13 23:09 +08:00: server is listening on localhost:8090
2018-01-13 23:09 +08:00: server is listening on localhost:8090
2018-01-13 23:10 +08:00: server is listening on localhost:8090
2018-01-13 23:10 +08:00: server is listening on localhost:8090
2018-01-13 23:11 +08:00: server is listening on localhost:8090
2018-01-13 23:11 +08:00: server is listening on localhost:8090
2018-01-13 23:12 +08:00: server is listening on localhost:8090
2018-01-13 23:12 +08:00: server is listening on localhost:8090
2018-01-13 23:13 +08:00: server is listening on localhost:8090
2018-01-13 23:13 +08:00: server is listening on localhost:8090
2018-01-13 23:14 +08:00: server is listening on localhost:8090
2018-01-13 23:14 +08:00: server is listening on localhost:8090
2018-01-13 23:15 +08:00: server is listening on localhost:8090
2018-01-13 23:15 +08:00: server is listening on localhost:8090
2018-01-13 23:16 +08:00: server is listening on localhost:8090
2018-01-13 23:16 +08:00: server is listening on localhost:8090
2018-01-13 23:17 +08:00: server is listening on localhost:8090
2018-01-13 23:17 +08:00: server is listening on localhost:8090
2018-01-13 23:18 +08:00: server is listening on localhost:8090
2018-01-13 23:18 +08:00: server is listening on localhost:8090
2018-01-13 23:19 +08:00: server is listening on localhost:8090
2018-01-13 23:19 +08:00: server is listening on localhost:8090
2018-01-13 23:20 +08:00: server is listening on localhost:8090
2018-01-13 23:20 +08:00: server is listening on localhost:8090
2018-01-13 23:21 +08:00: server is listening on localhost:8090
2018-01-13 23:21 +08:00: server is listening on localhost:8090
2018-01-13 23:22 +08:00: server is listening on localhost:8090
2018-01-13 23:22 +08:00: server is listening on localhost:8090
2018-01-13 23:23 +08:00: server is listening on localhost:8090
2018-01-13 23:23 +08:00: server is listening on localhost:8090
2018-01-13 23:24 +08:00: server is listening on localhost:8090
2018-01-13 23:24 +08:00: server is listening on localhost:8090
2018-01-13 23:25 +08:00: server is listening on localhost:8090
2018-01-13 23:25 +08:00: server is listening on localhost:8090
2018-01-13 23:26 +08:00: server is listening on localhost:8090
2018-01-13 23:26 +08:00: server is listening on localhost:8090
2018-01-13 23:27 +08:00: server is listening on localhost:8090
2018-01-13 23:27 +08:00: server is listening on localhost:8090
2018-01-13 23:28 +08:00: server is listening on localhost:8090
2018-01-13 23:28 +08:00: server is listening on localhost:8090
2018-01-13 23:29 +08:00: server is listening on localhost:8090
2018-01-13 23:29 +08:00: server is listening on localhost:8090
2018-01-13 23:30 +08:00: server is listening on localhost:8090
2018-01-13 23:30 +08:00: server is listening on localhost:8090
2018-01-13 23:31 +08:00: server is listening on localhost:8090
2018-01-13 23:31 +08:00: server is listening on localhost:8090
2018-01-13 23:32 +08:00: server is listening on localhost:8090
2018-01-13 23:32 +08:00: server is listening on localhost:8090
2018-01-13 23:33 +08:00: server is listening on localhost:8090
2018-01-13 23:33 +08:00: server is listening on localhost:8090
2018-01-13 23:34 +08:00: server is listening on localhost:8090
2018-01-13 23:34 +08:00: server is listening on localhost:8090
2018-01-13 23:35 +08:00: server is listening on localhost:8090
2018-01-13 23:35 +08:00: server is listening on localhost:8090
2018-01-13 23:36 +08:00: server is listening on localhost:8090
2018-01-13 23:36 +08:00: server is listening on localhost:8090
2018-01-13 23:37 +08:00: server is listening on localhost:8090
2018-01-13 23:37 +08:00: server is listening on localhost:8090
2018-01-13 23:38 +08:00: server is listening on localhost:8090
2018-01-13 23:38 +08:00: server is listening on localhost:8090
2018-01-13 23:39 +08:00: server is listening on localhost:8090
2018-01-13 23:39 +08:00: server is listening on localhost:8090
2018-01-13 23:40 +08:00: server is listening on localhost:8090
2018-01-13 23:40 +08:00: server is listening on localhost:8090
2018-01-13 23:41 +08:00: server is listening on localhost:8090
2018-01-13 23:41 +08:00: server is listening on localhost:8090
2018-01-13 23:42 +08:00: server is listening on localhost:8090
2018-01-13 23:42 +08:00: server is listening on localhost:8090
2018-01-13 23:43 +08:00: server is listening on localhost:8090
2018-01-13 23:43 +08:00: server is listening on localhost:8090
2018-01-13 23:44 +08:00: server is listening on localhost:8090
2018-01-13 23:44 +08:00: server is listening on localhost:8090
2018-01-13 23:45 +08:00: server is listening on localhost:8090
2018-01-13 23:45 +08:00: server is listening on localhost:8090
2018-01-13 23:46 +08:00: server is listening on localhost:8090
2018-01-13 23:46 +08:00: server is listening on localhost:8090
2018-01-13 23:47 +08:00: server is listening on localhost:8090
2018-01-13 23:47 +08:00: server is listening on localhost:8090
2018-01-13 23:48 +08:00: server is listening on localhost:8090
2018-01-13 23:48 +08:00: server is listening on localhost:8090
2018-01-13 23:49 +08:00: server is listening on localhost:8090
2018-01-13 23:49 +08:00: server is listening on localhost:8090
2018-01-13 23:50 +08:00: server is listening on localhost:8090
2018-01-13 23:50 +08:00: server is listening on localhost:8090
2018-01-13 23:51 +08:00: server is listening on localhost:8090
2018-01-13 23:51 +08:00: server is listening on localhost:8090
2018-01-13 23:52 +08:00: server is listening on localhost:8090
2018-01-13 23:52 +08:00: server is listening on localhost:8090
2018-01-13 23:53 +08:00: server is listening on localhost:8090
2018-01-13 23:53 +08:00: server is listening on localhost:8090
2018-01-13 23:54 +08:00: server is listening on localhost:8090
2018-01-13 23:54 +08:00: server is listening on localhost:8090
2018-01-13 23:55 +08:00: server is listening on localhost:8090
2018-01-13 23:55 +08:00: server is listening on localhost:8090
2018-01-13 23:56 +08:00: server is listening on localhost:8090
2018-01-13 23:56 +08:00: server is listening on localhost:8090
2018-01-13 23:57 +08:00: server is listening on localhost:8090
2018-01-13 23:57 +08:00: server is listening on localhost:8090
2018-01-13 23:58 +08:00: server is listening on localhost:8090
2018-01-13 23:58 +08:00: server is listening on localhost:8090
2018-01-13 23:59 +08:00: server is listening on localhost:8090
2018-01-13 23:59 +08:00: server is listening on localhost:8090
2018-01-14 00:00 +08:00: server is listening on localhost:8090
2018-01-14 00:00 +08:00: server is listening on localhost:8090
2018-01-14 00:01 +08:00: server is listening on localhost:8090
2018-01-14 00:01 +08:00: server is listening on localhost:8090
2018-01-14 00:01 +08:00: server is listening on localhost:8090
2018-01-14 00:02 +08:00: server is listening on localhost:8090
2018-01-14 00:02 +08:00: server is listening on localhost:8090
2018-01-14 00:03 +08:00: server is listening on localhost:8090
2018-01-14 00:03 +08:00: server is listening on localhost:8090
2018-01-14 00:04 +08:00: server is listening on localhost:8090
2018-01-14 00:04 +08:00: server is listening on localhost:8090
2018-01-14 00:05 +08:00: server is listening on localhost:8090
2018-01-14 00:05 +08:00: server is listening on localhost:8090
2018-01-14 00:06 +08:00: server is listening on localhost:8090
2018-01-14 00:06 +08:00: server is listening on localhost:8090
2018-01-14 00:07 +08:00: server is listening on localhost:8090
2018-01-14 00:07 +08:00: server is listening on localhost:8090
2018-01-14 00:08 +08:00: server is listening on localhost:8090
2018-01-14 00:08 +08:00: server is listening on localhost:8090
2018-01-14 00:09 +08:00: server is listening on localhost:8090
2018-01-14 00:09 +08:00: server is listening on localhost:8090
2018-01-14 00:10 +08:00: server is listening on localhost:8090
2018-01-14 00:10 +08:00: server is listening on localhost:8090
2018-01-14 00:11 +08:00: server is listening on localhost:8090
2018-01-14 00:11 +08:00: server is listening on localhost:8090
2018-01-14 00:12 +08:00: server is listening on localhost:8090
2018-01-14 00:12 +08:00: server is listening on localhost:8090
2018-01-14 00:13 +08:00: server is listening on localhost:8090
2018-01-14 00:13 +08:00: server is listening on localhost:8090
2018-01-14 00:14 +08:00: server is listening on localhost:8090
2018-01-14 00:14 +08:00: server is listening on localhost:8090
2018-01-14 00:15 +08:00: server is listening on localhost:8090
2018-01-14 00:15 +08:00: server is listening on localhost:8090
2018-01-14 00:16 +08:00: server is listening on localhost:8090
